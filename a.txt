A segment tree is a versatile data structure used for handling various types of range queries efficiently.
It is particularly useful for problems that involve querying and updating ranges of elements in an array
or list. The segment tree allows for performing these operations in logarithmic time complexity relative to
the size of the array.

Here's how a segment tree works:

Construction: To build a segment tree, you recursively divide the input array into smaller segments until
each segment represents a single element of the array. Each segment is represented by a node in the tree.

Representation: In a segment tree, each node represents a segment of the array. The root node represents
the entire array, and each leaf node represents a single element. Intermediate nodes represent subarrays.

Querying: When querying a range [L, R] of the array, the segment tree efficiently provides the answer by
recursively traversing the tree and considering only the relevant segments that intersect with the query range.

Updating: Similarly, when updating a value at index i in the array, the segment tree can efficiently propagate
the update to all relevant segments in the tree.

Lazy Propagation: For some problems, lazy propagation can be used to defer updates until they
are actually needed. This optimization can improve the efficiency of certain types of range updates.

Segment trees are commonly used in various algorithmic problems, such as finding the minimum,
maximum, sum, or other aggregate values over a range of elements in an array. They are also used
in problems involving range updates and queries, such as range addition, range assignment, etc.

https://dreampuf.github.io/GraphvizOnline/
https://python-fiddle.com/examples/networkx

digraph BinaryTree {
    "36 [0-5]" -> "9 [0-2]";
    "36 [0-5]" -> "27 [3-5]";
    "9 [0-2]" -> "4 [0-1]";
    "9 [0-2]" -> "5 [2-2]";
    "27 [3-5]"-> "16 [3-4]";
    "27 [3-5]" -> "11 [5-5]";
    "4 [0-1]" -> "1 [0-0]";
    "4 [0-1]" -> "3 [1-]";
    "16 [3-4]" -> "7 [3-3]";
    "16 [3-4]" -> "9 [4-4]";
}
